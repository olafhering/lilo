# $Id$
# vim: syntax=sh
#
#  library for PowerMac routings

unset running_on_pmac_old
unset running_on_pmac_new
HOME=$TEMP	# make hmount et al. happy


function running_on_pmac_old () {
    echo running on pmac_old

    echo "generating $TEMP/miboot.conf ..."
    echo

    if [ "$OPTION_BOOTFOLDER" ] ; then
	HFS_BOOTFOLDER=":$OPTION_BOOTFOLDER"
    else
	HFS_BOOTFOLDER=":$DEFAULT_BOOTFOLDER"
    fi
    echo HFS_BOOTFOLDER $HFS_BOOTFOLDER
    echo OPTION_BOOTFOLDER $OPTION_BOOTFOLDER

    # starting the work
    {
	test -z "$OPTION_TIMEOUT" || echo "timeout = $OPTION_TIMEOUT"
	test -z "$OPTION_DEFAULT" || echo "default = $OPTION_DEFAULT"
	test -z "$OPTION_ROOT"    || echo "root = $OPTION_ROOT"
	test -z "$OPTION_APPEND"  || echo "append = \"$OPTION_APPEND\""
	test -z "$OPTION_INITRD"  || echo "initrd = ${HFS_BOOTFOLDER}:`basename ${OPTION_INITRD}`"
	echo
	for (( i=1; i<=CONFIG_IMAGE_COUNT; i++ )); do
	    test -z "${CONFIG_IMAGE_OTHER[$i]}" || continue
	    echo "image = ${HFS_BOOTFOLDER}:`basename ${CONFIG_IMAGE_FILE[$i]}`"
	    test -z "${CONFIG_IMAGE_LABEL[$i]}"  || echo "    label = ${CONFIG_IMAGE_LABEL[$i]}"
	    test -z "${CONFIG_IMAGE_ROOT[$i]}"   || echo "    root = ${CONFIG_IMAGE_ROOT[$i]}"
	    test -z "${CONFIG_IMAGE_APPEND[$i]}" || echo "    append = \"${CONFIG_IMAGE_APPEND[$i]}\""
	    test -z "${CONFIG_IMAGE_INITRD[$i]}" || echo "    initrd = ${HFS_BOOTFOLDER}:`basename ${CONFIG_IMAGE_INITRD[$i]}`"
	    echo
	done
	echo
    } > $TEMP/miboot.conf

    # umount the boot = partition, or exit if that fails
    mount | grep -q "$OPTION_BOOT"
    if [ "$?" = "0" ] ; then 
	echo "unmount $OPTION_BOOT" ; umount $OPTION_BOOT || exit 1
    fi
    humount $OPTION_BOOT 2>/dev/null
    humount $OPTION_BOOT 2>/dev/null
    
    hmount $OPTION_BOOT  || exit 1
    echo using bootfolder \'$HFS_BOOTFOLDER\' on volume `hpwd` on $OPTION_BOOT 
    hmkdir $HFS_BOOTFOLDER 2>/dev/null
    hattrib -b $HFS_BOOTFOLDER
    hcd $HFS_BOOTFOLDER
    hcopy /lib/lilo/pmac/Finder.bin :Finder
    hcopy /lib/lilo/pmac/System.bin :System
    hcopy -r $TEMP/miboot.conf :
    hattrib -t TEXT -c "R*ch" :miboot.conf
    hattrib -t FNDR -c MACS Finder
    hattrib -t zsys -c MACS System
    
    for (( i=1; i<=CONFIG_IMAGE_COUNT; i++ )); do
	test -z "${CONFIG_IMAGE_OTHER[$i]}" || continue
	hcopy ${CONFIG_IMAGE_FILE[$i]} :`basename ${CONFIG_IMAGE_FILE[$i]}`
	if [ "${CONFIG_IMAGE_INITRD[$i]}" ]; then
	    hcopy ${CONFIG_IMAGE_INITRD[$i]} :`basename ${CONFIG_IMAGE_INITRD[$i]}`
	fi
    done
    hpwd
    hls -ltr
    humount
}


function running_on_pmac_new () {
    echo running on pmac_new

    # build the temp yaboot.conf

    # build the pathnames, copy the files to bootfolder if / is not bootable
    for (( i=1; i<=CONFIG_IMAGE_COUNT; i++ )); do
	test -z ${CONFIG_IMAGE_FILE[$i]} && continue
	unset FILE_PATH

	# check if the file is a real file
	if [ -f "${CONFIG_IMAGE_FILE[$i]}" ]; then
	    FILE_PATH=$(get_of_path ${CONFIG_IMAGE_FILE[$i]} | grep -v /pci[0-9])
	fi
	if [ -z "$FILE_PATH" -o "${CONFIG_IMAGE_COPY[$i]}" = "true" ] ; then
	    CONFIG_IMAGE_PATH[$i]="copy"
	else
	    CONFIG_IMAGE_PATH[$i]=$FILE_PATH
	fi
	unset FILE_PATH
	if [ -n "${CONFIG_IMAGE_INITRD[$i]}" ] ; then 
	    FILE_PATH=$(get_of_path ${CONFIG_IMAGE_INITRD[$i]} | grep -v /pci[0-9])
	    if [ -z "$FILE_PATH" -o "${CONFIG_IMAGE_COPY[$i]}" = "true" ] ; then
        	CONFIG_IMAGE_INITRDPATH[$i]="copy"
	    else
		CONFIG_IMAGE_INITRDPATH[$i]=$FILE_PATH
	    fi
	fi
	unset FILE_PATH
    done

    # starting the work
    {
	test -z "$OPTION_TIMEOUT" || echo "timeout = $OPTION_TIMEOUT"
	if [ "$OPTION_DEFAULT" ]; then
	    if [[ "$OPTION_DEFAULT" = @(macos|macosx) ]] ; then
		# yaboot.conf gets the first available imag= label as default
		for (( i=1; i<=CONFIG_IMAGE_COUNT; i++ )); do
		    test -z "${CONFIG_IMAGE_OTHER[$i]}" || continue
		    echo "default = ${CONFIG_IMAGE_LABEL[$i]}"
		done
	    else
		# a image = label is the default
		echo "default = $OPTION_DEFAULT"
	    fi
	fi
	
	test -z "$OPTION_ROOT"    || echo "root = $OPTION_ROOT"
	test -z "$OPTION_APPEND"  || echo "append = \"$OPTION_APPEND\""
	test -z "$OPTION_INITRD"  || echo "initrd = $OPTION_INITRD"

	for (( i=1; i<=CONFIG_IMAGE_COUNT; i++ )); do
	    [ "${CONFIG_IMAGE_OTHER[$i]}" ] &&  continue
	    if [ "${CONFIG_IMAGE_PATH[$i]}" = "copy" ] ; then
		echo "image = `basename ${CONFIG_IMAGE_FILE[$i]}`"
	    else
		echo "image = ${CONFIG_IMAGE_PATH[$i]}"
	    fi

	    test -z "${CONFIG_IMAGE_LABEL[$i]}"  || echo "    label = ${CONFIG_IMAGE_LABEL[$i]}"
	    test -z "${CONFIG_IMAGE_ROOT[$i]}"   || echo "    root = ${CONFIG_IMAGE_ROOT[$i]}"
	    test -z "${CONFIG_IMAGE_APPEND[$i]}" || echo "    append = \"${CONFIG_IMAGE_APPEND[$i]}\""

	    if [ "${CONFIG_IMAGE_INITRD[$i]}" ]; then
		if [ "${CONFIG_IMAGE_INITRDPATH[$i]}" = "copy" ] ; then
		    echo "    initrd = `basename ${CONFIG_IMAGE_INITRD[$i]}`" 
		else 
		    echo "    initrd = ${CONFIG_IMAGE_INITRDPATH[$i]}" 
		fi
	    fi
	done
    } > $TEMP/yaboot.conf

    BOOT_DEVICEPATH=$(get_of_path $OPTION_BOOT)
    OTHER_DEVICEPATH=$(get_of_path $OPTION_OTHER)

    echo "BOOT_DEVICEPATH  =  $BOOT_DEVICEPATH"
    echo "OTHER_DEVICEPATH  =  $OTHER_DEVICEPATH"
    {
	echo "<CHRP-BOOT>"
	echo "<COMPATIBLE>"
	echo "MacRISC MacRISC3 MacRISC4"
	echo "</COMPATIBLE>"
	echo "<DESCRIPTION>"
	echo "Linux/PPC Yaboot bootloader"
	echo "</DESCRIPTION>"
	echo "<BOOT-SCRIPT>"
	echo "\" screen\" output"
	echo "dev screen"
	echo "\" \"(0000000000aa00aa0000aaaaaa0000aa00aaaa5500aaaaaa)\" drop 0 7 set-colors"
	echo "\" \"(5555555555ff55ff5555ffffff5555ff55ffffff55ffffff)\" drop 8 15 set-colors"
	echo "device-end"
	echo "f to foreground-color"
	echo "0 to background-color"
	
	if [ "$CONFIG_PARSE_HASOTHER" = "true" ] ; then
	    unset LOOPBLAH
	    MY_MACOS_STRING=$(
	    for (( i=1; i<=CONFIG_IMAGE_COUNT; i++ )); do
		if [ -n "${CONFIG_IMAGE_OTHER[$i]}" -a -z "$LOOPBLAH" ] ; then
		    LOOPBLAH=true
		    if [ "${CONFIG_IMAGE_LABEL[$i]}" = "macosx" ] ; then
			echo "\" Booting Mac OS X ...\" cr \" boot $OTHER_DEVICEPATH,System\\Library\\CoreServices\\BootX\" eval"
		    else
			echo "\" Booting MacOS ...\" cr \" boot $OTHER_DEVICEPATH,\\\\:tbxi\" eval"
		    fi
		fi
	    done
	    )
	    MY_YABOOT_STRING="\" Booting Yaboot ...\" cr \" boot $BOOT_DEVICEPATH,\\\\yaboot\" eval "
	    if [ "$OPTION_DEFAULT" = "macos" -o "$OPTION_DEFAULT" = "macosx" ] ; then
		# macos or macosx is the default
		MY_STRING_WITH_SPACE_BAR=$MY_YABOOT_STRING
		MY_STRING_WITHOUT_SPACE_BAR=$MY_MACOS_STRING
		SPACE_BAR_HINT="linux"
	    else
		#yaboot is the default
		MY_STRING_WITH_SPACE_BAR=$MY_MACOS_STRING
		MY_STRING_WITHOUT_SPACE_BAR=$MY_YABOOT_STRING
		SPACE_BAR_HINT="MacOS"
	    fi
	    # 1 is the timeout
	    echo "\" \"(0C)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo "\" \"(09)  press space to boot $SPACE_BAR_HINT ... \" fb8-write drop"
	    echo "get-msecs d# 3 3E8 * +"
	    echo "begin"
	    echo "  key? if"
	    echo "    key case"
	    echo -n "      hex 20 of "
	    echo " $MY_STRING_WITH_SPACE_BAR  endof"
	    echo "    endcase"
	    echo "  then"
	    echo "  dup get-msecs &lt;"
	    echo "until"
	    echo "drop"
	    echo $MY_STRING_WITHOUT_SPACE_BAR
	    echo
	else
	    echo "\" \"(0d 0a)\" fb8-write drop"
	    echo -e "\n\" Booting Yaboot ...\" cr \" boot $BOOT_DEVICEPATH,\\\\\\yaboot\" eval"
	fi
	echo "</BOOT-SCRIPT>"
	cat /lib/lilo/pmac/os-badge-icon
	echo "</CHRP-BOOT>"
    } > $TEMP/os-chooser

    # umount the boot = partition, or exit if that fails
    if [ "$(</proc/mounts)" == *$OPTION_BOOT\ * ] ; then 
	echo "unmount $OPTION_BOOT"
	umount $OPTION_BOOT || exit 1
    fi
    humount $OPTION_BOOT 2>/dev/null
    humount $OPTION_BOOT 2>/dev/null
    
    hmount $OPTION_BOOT || exit 1

    HFS_BOOTFOLDER="${OPTION_BOOTFOLDER:-$DEFAULT_BOOTFOLDER}"
    hmkdir $HFS_BOOTFOLDER 2>/dev/null
    hattrib -b $HFS_BOOTFOLDER
    hcd $HFS_BOOTFOLDER
    hcopy $TEMP/yaboot.conf :yaboot.conf
    hcopy /lib/lilo/pmac/yaboot :yaboot
    hcopy /lib/lilo/pmac/Finder.bin :Finder
    hcopy /lib/lilo/pmac/System.bin :System
    hattrib -t BINA -c UNIX "Mac OS Rom" 2>/dev/null
    hattrib -t BINA -c UNIX "install"    2>/dev/null
    hattrib -t FNDR -c MACS Finder
    hattrib -t zsys -c MACS System
    hattrib -t TEXT -c "R*ch" yaboot.conf
    if [ "$OPTION_NO_OS_CHOOSER" = "yes" ] ; then
	hattrib -t tbxi -c chrp yaboot
	hattrib -t TEXT -c "R*ch" os-chooser 2>/dev/null
    else
	hcopy $TEMP/os-chooser :os-chooser
	hattrib -t BINA -c UNIX yaboot
	hattrib -t tbxi -c chrp os-chooser
    fi
    
    for (( i=1; i<=CONFIG_IMAGE_COUNT; i++ )); do
	test -z "${CONFIG_IMAGE_OTHER[$i]}" || continue
	if [ "${CONFIG_IMAGE_PATH[$i]}" = "copy" ] ; then
	    hcopy ${CONFIG_IMAGE_FILE[$i]} :`basename ${CONFIG_IMAGE_FILE[$i]}`
	fi
	test -z "${CONFIG_IMAGE_INITRD[$i]}" || (
	if [ "${CONFIG_IMAGE_INITRDPATH[$i]}" = "copy" ] ; then
	    hcopy ${CONFIG_IMAGE_INITRD[$i]} :`basename ${CONFIG_IMAGE_INITRD[$i]}`
	fi )
    done
    hpwd
    hls -ltr
    humount

    if [ "$OPTION_ACTIVATE" = "yes" ] ; then
	NV_BOOT_PATH=$(get_of_path $OPTION_BOOT)
	echo set OF boot-device $NV_BOOT_PATH",\\\\:tbxi"
	nvsetenv boot-device $NV_BOOT_PATH",\\\\:tbxi"
    fi
}


#
# Local variables:
#     mode: sh
#     mode: font-lock
#     mode: auto-fill
#     sh-indent: 4
#     sh-multiline-offset: 2
#     sh-if-re: "\\s *\\b\\(if\\)\\b[^=]"
#     fill-column: 78
# End:
#
